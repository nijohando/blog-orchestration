#!/bin/bash

SCRIPT_NAME=$(basename $0)

function require_env() {
  local var_name=$1
  echo $var_name
  if [ -z "${!var_name}" ]; then
    echo "Environment variable ${var_name} is required"
    exit 1
  fi
}

function usage() {
  echo "usage: ${SCRIPT_NAME} <command> [<args>]"
  echo ""
  echo "Execute servral commands in a command container."
  echo ""
  echo "img   Build terraform container"
  echo "sh    Start an interactive shell session in a terraform container"
  echo "tf    Execute a terraform command in a terraform container"
  exit 1
}


function run() {
  local dir=$1
  local cmd=$2
  docker run -it --rm \
    -e AWS_REGION \
    -e AWS_PROFILE \
    -v ${dir}:/work \
    -v ${HOME}/.aws:/root/.aws:ro \
    -w /work \
    --entrypoint /bin/sh \
    ${TF_IMAGE} \
    -c "${cmd}"
}

function img() {
  DOCKER_BUILDKIT=1 docker build --build-arg terraform_version=${TF_VERSION} -t ${TF_IMAGE} ./dockerfiles/terraform
}

function sh() {
  run $PWD /bin/ash
}

function usage_tf() {
  echo "Usage: ${CMD_NAME} tf [-d <directory>] [-p <profile>] <args>"
  exit 1
}

function tf() {

  local dir
  local profiles=()

  while getopts :p:d:h OPT
  do
    case $OPT in
      p) profiles+=($OPTARG)
        ;;
      d) dir=$OPTARG
        ;;
      h) usage_tf
        ;;
    esac
  done

  shift $((OPTIND - 1))

  if [ -z $dir ]; then
    dir=.
  fi

  local target_dir=$(cd $dir; pwd)
  local project_name=`basename ${target_dir}`
  local env_id
  local varfile
  echo ""
  for profile in "${profiles[@]}"
  do
    var_file="${profile}.tfvars"
    if [ -f "${target_dir}/${var_file}" ]; then
      var_files+="-var-file=${var_file} "
    else
      echo "Profile '${profile}' is ignored."
    fi
  done
  if [ ${#profiles[@]} -gt 0 ]; then
    env_id=${profiles[0]}
  else
    env_id="default"
  fi
  local backend_config_key=${project_name}
  if [ ! -z ${env_id} ]; then
      backend_config_key+="/${env_id}"
  fi
  local cmd="terraform"
  local subcmd=$1
  shift
  local subargs=$@

  run ${target_dir} "terraform init -reconfigure -backend-config='bucket=${TF_BACKEND_BUCKET}' -backend-config='key=${backend_config_key}'"
  if [ $? -ne 0 ]; then
    exit 1
  fi

  local tf_cmd="${cmd} ${subcmd} ${subargs}"
  case $subcmd in
    "plan" | "apply" | "destroy" | "refresh")
       local var_meta=$(cat << EOS
{
    "orch_name": "${ORCH_NAME}",
    "project_name": "${project_name}",
    "env_id": "${env_id}",
    "tf_backend_bucket": "${TF_BACKEND_BUCKET}",
    "aws_region": "${AWS_REGION}",
    "comment": "terraform://${ORCH_NAME}/${project_name}/${env_id}",
    "tags" = {
      "terraform.io/orchestration": "${ORCH_NAME}",
      "terraform.io/project": "${project_name}",
      "terraform.io/env_id": "${env_id}"
    }
}
EOS
)
     tf_cmd="${tf_cmd} ${var_files} -var meta='${var_meta}'"
     ;;
  esac
  run ${target_dir} "${tf_cmd}"
}

require_env AWS_PROFILE
require_env AWS_REGION
require_env TF_IMAGE
require_env TF_VERSION
require_env TF_BACKEND_BUCKET
require_env ORCH_NAME

echo ""
echo "-----------------------------------------------"
echo "Environment variables"
echo "-----------------------------------------------"
echo "AWS_PROFILE=${AWS_PROFILE}"
echo "AWS_REGION=${AWS_REGION}"
echo "TF_IMAGE=${TF_IMAGE}"
echo "TF_VERSION=${TF_VERSION}"
echo "TF_BACKEND_BUCKET=${TF_BACKEND_BUCKET}"
echo "ORCH_NAME=${ORCH_NAME}"
echo ""

subcmd=$1
shift

case $subcmd in
  img)
    img
    ;;
  sh)
    sh
    ;;
  tf)
    tf $@
    ;;
  *)
    usage
    ;;
esac

